---
version: '3.4'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - dh-kafka-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181  # Puerto en el que Zookeeper escucha las conexiones de los clientes
      ZOOKEEPER_TICK_TIME: 2000    # Unidad de tiempo básica en milisegundos usada por Zookeeper para la sincronización

  broker:
    image: confluentinc/cp-server:7.2.2
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - 19092:19092    # Puerto mapeado para uso interno
      - 9092:9092   # Puerto mapeado para uso externo
      - 9101:9101   # Puerto para JMX (Java Management Extensions)
    networks:
      - dh-kafka-network
    environment:
      # Identificador único para este broker en el clúster.
      KAFKA_BROKER_ID: 1

      # Dirección y puerto del servidor Zookeeper para conectar este broker.
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'

      # Define el protocolo de seguridad usado por cada listener. En este caso, ambos listeners usan PLAINTEXT (sin cifrado).
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT

      # Listeners que Kafka anunciará para que los clientes puedan conectarse. LISTENER_DOCKER_INTERNAL es para comunicación interna de Docker, y LISTENER_DOCKER_EXTERNAL es para comunicación externa.
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092,LISTENER_DOCKER_INTERNAL://broker:19092    
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter

      # Factor de replicación para el tema (topic) de offsets de consumidores. En un entorno de producción, esto debería ser mayor que 1 para alta disponibilidad.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

      # Tiempo de espera (en milisegundos) antes de que el primer rebalanceo del grupo de consumidores se inicie.
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1

      # Número mínimo de réplicas en sincronización (In-Sync Replicas, ISR) para los logs de estado de las transacciones.
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

      # Factor de replicación para el log de estado de las transacciones.
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

      # Puerto donde estará disponible la interfaz JMX para monitoreo.
      KAFKA_JMX_PORT: 9101

      # Hostname para la interfaz JMX.
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.2
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    networks:
      - dh-kafka-network
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    build: ./connectors
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    networks:
      - dh-kafka-network
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.2.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.2.2
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
      - ksqldb-server
    ports:
      - "9021:9021"
    networks:
      - dh-kafka-network
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.2.2
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - connect
    ports:
      - "8088:8088"
    networks:
      - dh-kafka-network
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.2.2
    container_name: ksqldb-cli
    networks:
      - dh-kafka-network
    depends_on:
      - broker
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  mongodb:
    container_name: mongo
    image: mongo:6.0.2
    networks:
      - dh-kafka-network
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30

  analyzer:
    build: ./analyzer
    container_name: analyzer
    networks:
      - dh-kafka-network
    depends_on:
      - broker
  
  mongo-express:
    container_name: mongo-express
    image: mongo-express:latest
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb # use the name of the mongo container
    ports:
      - 3000:8081
    depends_on:
      - mongodb
    networks:
      - dh-kafka-network

  jupyter:
    build: ./jupyter
    container_name: jupyter
    environment:
      JUPYTER_ENABLE_LAB: "yes"
    ports:
      - 8888:8888
    depends_on:
      - mongodb
    networks:
      - dh-kafka-network
    
    

networks:
  dh-kafka-network: